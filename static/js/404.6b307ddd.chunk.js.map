{"version":3,"file":"static/js/404.6b307ddd.chunk.js","mappings":"iQACA,EAA4B,iCAA5B,EAAkF,0CAAlF,EAA0I,mCAA1I,EAAsL,8B,6BCoFtL,EA3EqB,WAAO,IAAD,EACzB,GAAkCA,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAGXC,GAAO,WAFIC,EAAAA,EAAAA,MAEKC,aAAT,eAAgBF,OAAQ,KAErCG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,mGAEDC,EAAAA,EAAAA,IAAeD,GAFd,OAEhBE,EAFgB,OAGtBd,EAAac,GAHS,gDAIbC,EAJa,KAIbA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SAC1BjB,GAAS,GANa,yDAAH,sDASvBS,EAAkBR,EACnB,GAAE,CAACA,IAIJ,OACE,iCACE,mBAAQiB,UAAWC,EAAeC,QAJvB,kBAAMjB,EAASE,EAAf,EAIX,qBAGCN,IAAS,SAACsB,EAAA,QAAD,IACTxB,IACC,iBAAKqB,UAAWC,EAAhB,WACE,gBACEG,IACEzB,EAAU0B,YAAV,0CACuC1B,EAAU0B,aAC7C,kCAENC,IAAK3B,EAAU4B,WAEjB,iBAAKP,UAAWC,EAAhB,WACE,2BACE,0BAAOtB,EAAU6B,SACjB,qCAAW7B,EAAU8B,aAAaC,MAAM,EAAG,GAA3C,WAEF,wCAAgBC,KAAKC,KAAKjC,EAAUkC,gBACpC,0BACE,uCACClC,EAAUmC,aAEb,0BACE,sCACA,0BACGnC,EAAUoC,QACTpC,EAAUoC,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,kBAO3D,iBAAKnB,UAAWC,EAAhB,WACE,SAAC,KAAD,CAASmB,GAAG,OAAO/B,MAAO,CAAEF,KAAAA,GAA5B,mBAGA,SAAC,KAAD,CAASiC,GAAG,UAAU/B,MAAO,CAAEF,KAAAA,GAA/B,yBAKF,SAAC,KAAD,MAGL,C,2CC/ED,UAJqB,WACnB,OAAO,wCACR,C,yLCAKkC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAMC,GAAN,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnB7B,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASb+B,EAAW,mCAAG,WAAOF,EAAMG,GAAb,yFACFT,EAASO,IAAT,6BACCD,EADD,kBACeG,IAFb,uBACjBhC,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,wDAaXL,EAAc,mCAAG,WAAMsC,GAAN,yFACLV,EAASO,IAAT,iBAAuBG,IADlB,uBACpBjC,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdkC,EAAY,mCAAG,WAAMjD,GAAN,yFACHsC,EAASO,IAAT,iBAAuB7C,EAAvB,aADG,uBAClBe,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZmC,EAAY,mCAAG,WAAMF,GAAN,yFACHV,EAASO,IAAT,iBAAuBG,EAAvB,aADG,uBAClBjC,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/movie-details.module.css?13a9","pages/MovieDetails/MovieDetails.jsx","pages/NotFoundPage/NotFoundPage.jsx","shared/services/FetchMoviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"movie-details_container__9Zseh\",\"secondaryContainer\":\"movie-details_secondaryContainer__O4E65\",\"description\":\"movie-details_description__oiUzg\",\"button\":\"movie-details_button__VgD4w\"};","import { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\n\nimport styles from './movie-details.module.css';\n\nimport { fetchMovieById } from 'shared/services/FetchMoviesApi';\nimport NotFoundPage from 'pages/NotFoundPage/NotFoundPage';\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from || '/';\n\n  useEffect(() => {\n    const fetchMovieDetails = async id => {\n      try {\n        const result = await fetchMovieById(id);\n        setMovieInfo(result);\n      } catch ({ response }) {\n        console.log(response.data.message);\n        setError(true);\n      }\n    };\n    fetchMovieDetails(movieId);\n  }, [movieId]);\n\n  const goBack = () => navigate(from);\n\n  return (\n    <>\n      <button className={styles.button} onClick={goBack}>\n        Go Back\n      </button>\n      {error && <NotFoundPage />}\n      {movieInfo && (\n        <div className={styles.container}>\n          <img\n            src={\n              movieInfo.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${movieInfo.poster_path}`\n                : 'https://via.placeholder.com/200'\n            }\n            alt={movieInfo.tagline}\n          />\n          <div className={styles.description}>\n            <h1>\n              <span>{movieInfo.title}</span>\n              <span>{`(${movieInfo.release_date.slice(0, 4)})`}</span>\n            </h1>\n            <p>Popularity: {Math.ceil(movieInfo.popularity)}</p>\n            <p>\n              <span>Overview</span>\n              {movieInfo.overview}\n            </p>\n            <p>\n              <span>Genre:</span>\n              <span>\n                {movieInfo.genres &&\n                  movieInfo.genres.map(genre => genre.name).join(', ')}\n              </span>\n            </p>\n          </div>\n        </div>\n      )}\n\n      <div className={styles.secondaryContainer}>\n        <NavLink to=\"cast\" state={{ from }}>\n          Cast\n        </NavLink>\n        <NavLink to=\"reviews\" state={{ from }}>\n          Reviews\n        </NavLink>\n      </div>\n\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","const NotFoundPage = () => {\n  return <h1>NotFoundPage</h1>;\n};\n\nexport default NotFoundPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '8c2d35d0c441850846a9f314ac71f075',\n  },\n});\n\nexport const fetchTrending = async page => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page, query) => {\n  const { data } = await instance.get(\n    `/search/movie?page=${page}&query=${query}`\n  );\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  console.log('genres', data.genres);\n  return data.genres;\n};\n\nexport const fetchMovieById = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n\n/*&query=${query}*/\n"],"names":["useState","movieInfo","setMovieInfo","error","setError","movieId","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMovieDetails","id","fetchMovieById","result","response","console","log","data","message","className","styles","onClick","NotFoundPage","src","poster_path","alt","tagline","title","release_date","slice","Math","ceil","popularity","overview","genres","map","genre","name","join","to","instance","axios","baseURL","params","api_key","fetchTrending","page","get","fetchMovies","query","movieID","fetchCredits","fetchReviews"],"sourceRoot":""}