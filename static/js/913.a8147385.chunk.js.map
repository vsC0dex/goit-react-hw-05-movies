{"version":3,"file":"static/js/913.a8147385.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/movie-list.module.css?b0dd","components/MovieList/MovieList.jsx","components/PostsSearch/initialState.js","webpack://goit-react-hw-05-movies/./src/components/PostsSearch/posts-search.module.css?ce27","components/PostsSearch/PostsSearch.jsx","pages/MoviesPage/MoviesPage.jsx","shared/Pagination.styled.js","shared/services/FetchMoviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"movie-list_list__U-qGD\",\"item\":\"movie-list_item__514PC\",\"link\":\"movie-list_link__klGvP\",\"text\":\"movie-list_text__2ZTj5\"};","import PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nimport styles from './movie-list.module.css';\n\nconst MovieList = ({ results }) => {\n  const location = useLocation();\n  const elements = results.map(({ id, title }) => (\n    <li key={id} className={styles.item}>\n      <NavLink\n        className={styles.link}\n        to={`/movies/${id}`}\n        state={{ from: location }}\n      >\n        <p className={styles.text}>{title}</p>\n      </NavLink>\n    </li>\n  ));\n  return <ul className={styles.list}>{elements}</ul>;\n};\n\nexport default MovieList;\n\nMovieList.defaultProps = {\n  results: [],\n};\n\nNavLink.propTypes = {\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","const initialState = {\n  search: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"posts-search_form__gmmWT\",\"button\":\"posts-search_button__FylCN\",\"input\":\"posts-search_input__Apm5i\"};","import { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport initialState from './initialState';\n\nimport styles from './posts-search.module.css';\n\nconst PostsSearch = ({ onSubmit }) => {\n  console.log(onSubmit);\n\n  const [state, setState] = useState({ ...initialState });\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value.trim() };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (state.search.trim().toLowerCase() === '') {\n      return console.log('Enter correct search!');\n    }\n\n    onSubmit(state.search);\n    setState({ ...initialState });\n  };\n\n  const { query } = state;\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          className={styles.input}\n          name=\"search\"\n          value={query}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          required\n          onChange={handleChange}\n        />\n        <button className={styles.button} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default memo(PostsSearch);\n\nPostsSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState, useMemo, useCallback } from 'react';\nimport { Notify } from 'notiflix';\n\nimport { Triangle } from 'react-loader-spinner';\n\nimport { fetchMovies } from 'shared/services/FetchMoviesApi';\nimport PostsSearch from 'components/PostsSearch/PostsSearch';\nimport MovieList from 'components/MovieList/MovieList';\nimport { PaginationStyled } from 'shared/Pagination.styled';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  const { query, page } = params;\n  const currentPage = Number(page) ? Number(page) : 1;\n  const [totalPages, setTotalPages] = useState(0);\n  const [movie, setMovie] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const getMovie = async page => {\n        const { results, total_pages } = await fetchMovies(page, query);\n        if (!results.length) {\n          Notify.failure('No found');\n          setTotalPages(0);\n        } else {\n          setTotalPages(total_pages);\n          setMovie(results);\n        }\n      };\n      getMovie(currentPage, query);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [query, currentPage, page]);\n\n  const onSearchMovie = useCallback(\n    query => {\n      console.log('1');\n      if (query !== searchQuery) {\n        setSearchParams({ query, page: 1 });\n        setMovie([]);\n        setSearchQuery(query);\n      } else {\n        Notify.warning('you have already entered this query!');\n      }\n    },\n    [setSearchParams, searchQuery]\n  );\n\n  const handlePageClick = e => {\n    setSearchParams({ query, page: e.selected + 1 });\n  };\n\n  return (\n    <>\n      <main style={{ paddingBottom: 20 }}>\n        <PostsSearch onSubmit={onSearchMovie} />\n        {loading && (\n          <Triangle\n            height=\"180\"\n            width=\"180\"\n            color=\"#4fa94d\"\n            ariaLabel=\"triangle-loading\"\n            visible={true}\n          />\n        )}\n        <MovieList results={movie} />\n        {error && <p>Error{error.message}</p>}\n        <PaginationStyled\n          breakLabel=\"...\"\n          nextLabel=\"Next\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={3}\n          pageCount={totalPages}\n          previousLabel=\"Prev\"\n          renderOnZeroPageCount={null}\n          disabledLinkClassName=\"disabled\"\n          activeClassName=\"activePage\"\n          forcePage={currentPage - 1}\n        />\n      </main>\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import styled from 'styled-components';\nimport ReactPaginate from 'react-paginate';\n\nexport const PaginationStyled = styled(ReactPaginate)`\n  display: flex;\n  list-style: none;\n  justify-content: flex-start;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  font-size: 16px;\n  font-weight: 700;\n  @media (max-width: 500px) {\n    flex-wrap: wrap;\n  }\n  & li {\n    border: 1px solid black;\n    border-radius: 10px;\n    margin: 5px;\n    color: ${p => 'black'};\n    transition: color 300ms linear, border 300ms linear;\n    :hover:not(.disabled) {\n      color: ${p => 'red'};\n      border: 1px solid red;\n    }\n  }\n  & .activePage {\n    color: ${p => 'red'};\n    border: 1px solid red;\n  }\n  & a {\n    padding: 0 8px;\n    cursor: pointer;\n  }\n  & a.disabled {\n    cursor: default;\n  }\n`;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '8c2d35d0c441850846a9f314ac71f075',\n  },\n});\n\nexport const fetchTrending = async page => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page, query) => {\n  const { data } = await instance.get(\n    `/search/movie?page=${page}&query=${query}`\n  );\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  console.log('genres', data.genres);\n  return data.genres;\n};\n\nexport const fetchMovieById = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n\n/*&query=${query}*/\n"],"names":["MovieList","results","location","useLocation","elements","map","id","title","className","styles","to","state","from","defaultProps","NavLink","PropTypes","search","PostsSearch","onSubmit","console","log","useState","initialState","setState","query","e","preventDefault","trim","toLowerCase","name","value","type","autoComplete","autoFocus","placeholder","required","onChange","target","prevState","memo","useSearchParams","searchParams","setSearchParams","params","useMemo","Object","fromEntries","page","currentPage","Number","totalPages","setTotalPages","movie","setMovie","searchQuery","setSearchQuery","loading","setLoading","error","setError","useEffect","getMovie","fetchMovies","total_pages","length","Notify","err","message","onSearchMovie","useCallback","style","paddingBottom","height","width","color","ariaLabel","visible","breakLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","pageCount","previousLabel","renderOnZeroPageCount","disabledLinkClassName","activeClassName","forcePage","PaginationStyled","styled","ReactPaginate","p","instance","axios","baseURL","api_key","fetchTrending","get","data","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews"],"sourceRoot":""}