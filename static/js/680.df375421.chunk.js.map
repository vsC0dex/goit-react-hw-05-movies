{"version":3,"file":"static/js/680.df375421.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/movie-list.module.css?b0dd","components/MovieList/MovieList.jsx","pages/HomePage/HomePage.jsx","shared/Pagination.styled.js","shared/services/FetchMoviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"movie-list_list__U-qGD\",\"item\":\"movie-list_item__514PC\",\"link\":\"movie-list_link__klGvP\",\"text\":\"movie-list_text__2ZTj5\"};","import PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nimport styles from './movie-list.module.css';\n\nconst MovieList = ({ results }) => {\n  const location = useLocation();\n  const elements = results.map(({ id, title }) => (\n    <li key={id} className={styles.item}>\n      <NavLink\n        className={styles.link}\n        to={`/movies/${id}`}\n        state={{ from: location }}\n      >\n        <p className={styles.text}>{title}</p>\n      </NavLink>\n    </li>\n  ));\n  return <ul className={styles.list}>{elements}</ul>;\n};\n\nexport default MovieList;\n\nMovieList.defaultProps = {\n  results: [],\n};\n\nNavLink.propTypes = {\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Triangle } from 'react-loader-spinner';\n\nimport { fetchTrending } from 'shared/services/FetchMoviesApi';\nimport MovieList from 'components/MovieList/MovieList';\nimport { PaginationStyled } from 'shared/Pagination.styled';\n\nconst HomePage = () => {\n  const [items, setItems] = useState([]);\n  const [totalPages, setTotalPages] = useState(1);\n  const [params, setParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const currentPage = Number(params.get('page'))\n    ? Number(params.get('page'))\n    : 1;\n\n  useEffect(() => {\n    const getTrending = async page => {\n      try {\n        setLoading(true);\n        const { results, total_pages } = await fetchTrending(page);\n        setItems(results);\n        setTotalPages(total_pages);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getTrending(currentPage);\n  }, [currentPage]);\n\n  const handleClick = e => {\n    setParams({ page: e.selected + 1 });\n  };\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      <MovieList results={items} />\n      {loading && (\n        <Triangle\n          height=\"180\"\n          width=\"180\"\n          color=\"#4fa94d\"\n          ariaLabel=\"triangle-loading\"\n          visible={true}\n        />\n      )}\n      {totalPages > 1 && (\n        <PaginationStyled\n          breakLabel=\"...\"\n          nextLabel=\"Next\"\n          onPageChange={handleClick}\n          pageRangeDisplayed={3}\n          pageCount={totalPages}\n          previousLabel=\"Prev\"\n          renderOnZeroPageCount={null}\n          disabledLinkClassName=\"disabled\"\n          activeClassName=\"activePage\"\n          forcePage={currentPage - 1}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n","import styled from 'styled-components';\nimport ReactPaginate from 'react-paginate';\n\nexport const PaginationStyled = styled(ReactPaginate)`\n  display: flex;\n  list-style: none;\n  justify-content: flex-start;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  font-size: 16px;\n  font-weight: 700;\n  @media (max-width: 500px) {\n    flex-wrap: wrap;\n  }\n  & li {\n    border: 1px solid black;\n    border-radius: 10px;\n    margin: 5px;\n    color: ${p => 'black'};\n    transition: color 300ms linear, border 300ms linear;\n    :hover:not(.disabled) {\n      color: ${p => 'red'};\n      border: 1px solid red;\n    }\n  }\n  & .activePage {\n    color: ${p => 'red'};\n    border: 1px solid red;\n  }\n  & a {\n    padding: 0 8px;\n    cursor: pointer;\n  }\n  & a.disabled {\n    cursor: default;\n  }\n`;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '8c2d35d0c441850846a9f314ac71f075',\n  },\n});\n\nexport const fetchTrending = async page => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page, query) => {\n  const { data } = await instance.get(\n    `/search/movie?page=${page}&query=${query}`\n  );\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  console.log('genres', data.genres);\n  return data.genres;\n};\n\nexport const fetchMovieById = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n\n/*&query=${query}*/\n"],"names":["MovieList","results","location","useLocation","elements","map","id","title","className","styles","to","state","from","defaultProps","NavLink","PropTypes","useState","items","setItems","totalPages","setTotalPages","useSearchParams","params","setParams","loading","setLoading","currentPage","Number","get","useEffect","getTrending","page","fetchTrending","total_pages","console","log","message","height","width","color","ariaLabel","visible","breakLabel","nextLabel","onPageChange","e","selected","pageRangeDisplayed","pageCount","previousLabel","renderOnZeroPageCount","disabledLinkClassName","activeClassName","forcePage","PaginationStyled","styled","ReactPaginate","p","instance","axios","baseURL","api_key","data","fetchMovies","query","fetchMovieById","movieID","fetchCredits","movieId","fetchReviews"],"sourceRoot":""}